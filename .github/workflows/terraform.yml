name: 'Terraform'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
  workflow_dispatch:

permissions:
  contents: read

env:
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=$BUCKET_TF_STATE" \
            -backend-config="prefix=terraform/state" \
            -reconfigure
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt 
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      # Apply Terraform changes if plan is successful
      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' && steps.plan.outputs.exitcode == 0 }}
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      # Destroy Terraform resources if plan indicates deletion
      - name: Terraform Destroy
        if: ${{ github.ref == 'refs/heads/main' && steps.plan.outputs.exitcode == 1 }}
        run: terraform destroy -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
